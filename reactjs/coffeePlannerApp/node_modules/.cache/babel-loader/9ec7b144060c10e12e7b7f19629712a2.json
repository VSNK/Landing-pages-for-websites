{"ast":null,"code":"var _jsxFileName = \"/home/workspace/reactjs/coding-practices/coffeePlannerApp/src/components/CoffeePlanner/index.js\";\n// Write your code here.\nimport { Component } from 'react';\nimport CoffeePlannerQuestion from '../CoffeePlannerQuestion';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CoffeePlanner extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showPlan: false\n    };\n\n    this.renderResponse = () => {\n      const {\n        DRINK_TYPE,\n        COFFEE_TYPE,\n        QUANTITY,\n        GRIND_TYPE,\n        DELIVER_TYPE\n      } = this.state;\n\n      if (DRINK_TYPE === undefined || COFFEE_TYPE === undefined || QUANTITY === undefined || GRIND_TYPE === undefined || DELIVER_TYPE === undefined) {\n        return 'Kindly select options for all the questions.';\n      }\n\n      return `I Drink my coffee as ${DRINK_TYPE}, with a ${COFFEE_TYPE} type of bean. ${QUANTITY} of ${GRIND_TYPE} ground, send to me ${DELIVER_TYPE}.`;\n    };\n\n    this.addAnswer = answer => this.setState(prevState => ({ ...prevState,\n      ...answer,\n      showPlan: false\n    }));\n\n    this.renderQuestions = () => {\n      const {\n        coffeePlannerList\n      } = this.props;\n      return coffeePlannerList.map(question => {\n        const {\n          id,\n          questionTitle,\n          questionType,\n          optionsList\n        } = question;\n        let selectedOption = null; // eslint-disable-next-line react/destructuring-assignment\n\n        selectedOption = this.state[questionType];\n        return /*#__PURE__*/_jsxDEV(CoffeePlannerQuestion, {\n          addAnswer: this.addAnswer,\n          questionTitle: questionTitle,\n          questionType: questionType,\n          optionsList: optionsList,\n          selectedOption: selectedOption\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this);\n      });\n    };\n\n    this.onShowPlan = () => this.setState(prevState => ({ ...prevState,\n      showPlan: true\n    }));\n  }\n\n  render() {\n    const {\n      showPlan\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"header-heading\",\n          children: \"Create a Plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header-description\",\n          children: \"We offer an assortment of the best artesian coffees from the globe delivered fresh to the door create your plan with this\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"body-section\",\n        children: [this.renderQuestions(), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.onShowPlan,\n          children: \"Create my plan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), showPlan && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"plan\",\n          children: this.renderResponse()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CoffeePlanner;","map":{"version":3,"sources":["/home/workspace/reactjs/coding-practices/coffeePlannerApp/src/components/CoffeePlanner/index.js"],"names":["Component","CoffeePlannerQuestion","CoffeePlanner","state","showPlan","renderResponse","DRINK_TYPE","COFFEE_TYPE","QUANTITY","GRIND_TYPE","DELIVER_TYPE","undefined","addAnswer","answer","setState","prevState","renderQuestions","coffeePlannerList","props","map","question","id","questionTitle","questionType","optionsList","selectedOption","onShowPlan","render"],"mappings":"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","sourcesContent":["// Write your code here.\nimport {Component} from 'react'\nimport CoffeePlannerQuestion from '../CoffeePlannerQuestion'\nimport './index.css'\n\nclass CoffeePlanner extends Component {\n  state = {showPlan: false}\n\n  renderResponse = () => {\n    const {\n      DRINK_TYPE,\n      COFFEE_TYPE,\n      QUANTITY,\n      GRIND_TYPE,\n      DELIVER_TYPE,\n    } = this.state\n\n    if (\n      DRINK_TYPE === undefined ||\n      COFFEE_TYPE === undefined ||\n      QUANTITY === undefined ||\n      GRIND_TYPE === undefined ||\n      DELIVER_TYPE === undefined\n    ) {\n      return 'Kindly select options for all the questions.'\n    }\n\n    return `I Drink my coffee as ${DRINK_TYPE}, with a ${COFFEE_TYPE} type of bean. ${QUANTITY} of ${GRIND_TYPE} ground, send to me ${DELIVER_TYPE}.`\n  }\n\n  addAnswer = answer =>\n    this.setState(prevState => ({...prevState, ...answer, showPlan: false}))\n\n  renderQuestions = () => {\n    const {coffeePlannerList} = this.props\n    return coffeePlannerList.map(question => {\n      const {id, questionTitle, questionType, optionsList} = question\n      let selectedOption = null\n      // eslint-disable-next-line react/destructuring-assignment\n      selectedOption = this.state[questionType]\n      return (\n        <CoffeePlannerQuestion\n          key={id}\n          addAnswer={this.addAnswer}\n          questionTitle={questionTitle}\n          questionType={questionType}\n          optionsList={optionsList}\n          selectedOption={selectedOption}\n        />\n      )\n    })\n  }\n\n  onShowPlan = () =>\n    this.setState(prevState => ({\n      ...prevState,\n      showPlan: true,\n    }))\n\n  render() {\n    const {showPlan} = this.state\n    return (\n      <div className=\"app-container\">\n        <div className=\"header-section\">\n          <h1 className=\"header-heading\">Create a Plan</h1>\n          <p className=\"header-description\">\n            We offer an assortment of the best artesian coffees from the globe\n            delivered fresh to the door create your plan with this\n          </p>\n        </div>\n        <div className=\"body-section\">\n          {this.renderQuestions()}\n          <button type=\"button\" onClick={this.onShowPlan}>\n            Create my plan\n          </button>\n          {showPlan && <p className=\"plan\">{this.renderResponse()}</p>}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CoffeePlanner\n"]},"metadata":{},"sourceType":"module"}